#include <iostream>
#include <string>
#include <cstring>
using namespace std; 

int lastIndexOf(char *s, char target)
{
  int index = 0;
  int size = strlen(s);
  cout << target << endl;

  for(int i = 0; i < size; i++)
    {
     if(s[i] == target)
	index = i;
    }
  return index;
}

void reverse(char *s)
{
  int size = strlen(s);
  int i, j;
  for(i=0, j=size-1; i<j; i++, j--)
    {
      char temp = s[i];
      s[i] = s[j];
      s[j] = temp;
    }
}

bool isPalindrome(char *s)
{
  int size = strlen(s);
  char n[size];
  strcpy(n, s);
  reverse(n);
  for(int i = 0; i < size; ++i) 
    {
    if(s[i] != n[i]) 
      return false;
    }
  return true;
}

int replace(char *s, char target, char replacementChar)
{
  int size = strlen(s);
  int count = 0;

  for(int i = 0; i < size; i++)
    {
      if(s[i] == target)
	{
	  s[i] = replacementChar;
	  count++;
	}   
    }
  cout << count << endl;

  for(int i = 0; i < size; i++)
    cout << s[i];
  cout << endl;

  return count;
}

int findSubString(char *s, char substring[])
{
  int size = strlen(s); 
  int subsize = strlen(substring);
  char compare[subsize];
  for(int i = 0; i < size; i++)
    {
      if(s[i] == substring[0]) {
	cout << s[i] << endl;
	cout << substring[0] << endl;
	return 0;
	strncpy(compare, s, subsize);
	for(int j = 0; j < subsize; ++j)
	  cout << compare[j];
	cout << endl;
	return i;
      }
      
         
    }
  return 0;
}

int main()
{
  char str[] = "This is a sample string";
  char target = 's';
  int lastIndex;
  char replacementChar = 'A';

  lastIndex = lastIndexOf(str, target);
  isPalindrome(str);
  reverse(str);
  
  for(int i = 0; i < strlen(str); ++i)
    cout << str[i];
  cout << endl;
  
  char pal[] = "abcba";
  cout << isPalindrome(pal) << endl;
  
  replace(str, target, replacementChar);

  char amelie[] = "amelie";
  char substring[] = "el";
  
  findSubString(amelie, substring);
  return 0;
}
