#include <iostream>
#include <stack>
#include <string>
#include <sstream>
using namespace std;


bool isOperator(char input)
{
  char arr[] = {'-', '+', '*', '/'};
  for(int i = 0; i < 4; i++)
    {
      if(input == arr[i])
        {
          return true;
        }
    }
  return false;
}

bool isOperand(char input)
{
  if(input >= 48 && input <= 57)
    {
      return true;
    }
  return false;
}

string InfixToPostfix(string input)
{
  stack<int> calcStack;
  string postfixExp = "";
  for(int i = 0; i < input.length(); i++)
    {
      if(isOperator(input[i]))
        {
          while((!calcStack.empty()) && (calcStack.top() != '('))
            {
              postfixExp += calcStack.top();
              calcStack.pop();
            }
          calcStack.push(input[i]);
        }
      else if(isOperand(input[i]))
        {
          postfixExp += input[i];
        }
      else if(input[i] == '(')
        {
          calcStack.push(input[i]);
        }
      else if(input[i] == ')')
        {
          while((!calcStack.empty()) && (calcStack.top() != '('))
            {
              postfixExp += calcStack.top();
              calcStack.pop();
            }
          calcStack.pop();
        }
    }
  while(!calcStack.empty())
    {
      postfixExp += calcStack.top();
      calcStack.pop();
    }
  return postfixExp;
}

void performOp(const string& input, stack<int>& calcStack)
{
  int left, right, result;
  left = calcStack.top();
  calcStack.pop();
  cout << "left: " << left << endl;
  right = calcStack.top();
  calcStack.pop();
  cout << "right: " << right << endl;

  if(input == "-")
    {
      result = left-right;
    }
  else if(input == "+")
    {
      result = left+right;
    }
  else if(input == "*")
    {
      result = left*right;
    }
  else if(input == "/")
    {
      result = left/right;
    }
  else
    cout << "Invalid input" << endl;

  cout << result << endl;
  calcStack.push(result);
}


int main()
{
  string input;
  string postfixExp;
  int result;
  stack<int> calcStack;

  cout << "Enter an infix expression: " << endl;
  getline(cin, input);
  postfixExp = InfixToPostfix(input);

  cout << "Converted to postfix expression: " << endl;
  cout << postfixExp << endl;
  cout << "Got here!" << endl;
  performOp(postfixExp, calcStack);
  cout << "The result of the equation: " << endl;
  cout << result << endl;
}



