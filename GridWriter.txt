Amelie Cameron
Assignment 13 Pt 2

1.  The two argument constructor of the Shape class contains this code:
this->x = x;
	this->y = y;
	Why is it necessary to put “this->” in front of x and y? If you are not sure then remove these 	lines and see if it changes the output.

	'This' is a pointer to the Shape class and the arrow dereferences the pointer. If you change the constructor to “x=x” and “y=y” the shapes no longer appear in the grid. That is because the compiler doesn't know that you want to access the variables for the Shape class. You need a dereferenced pointer to point to those member variables.
 
2. In the containsPoint member function of Circle, why are this->x and this->y in scope, even though 	they are not defined as member variables in Circle.h?
	
	Even though they are not defined as member variables in Circle.h, they are still in scope because the Circle class inherits from the Shape class as seen in the code: 
 “class Circle : public Shape”

3. What is the purpose of the keyword “virtual” in front of Shape::containsPoint and 	Shape::getArea? What is the purpose of the “ = 0”?

	The functions containsPoint and getArea are virtual member functions which means that they can be redefined in derived classes which allows for base class pointers to call the appropriate function using references.  Since these functions are later redefined in the Circle class it is important to include the “virtual” keyword. The “ = 0” at the end makes them pure virtual functions (the definitions have been replaced by = 0.) Since these are pure virtual functions, Shape becomes an abstract base class. The “= 0” restricts the functionality of the Shape class so that you cannot call the containsPoint or getArea functions for a generic/unknown shape.

4. In Circle.cpp the three argument Circle constructor is defined like this:
Circle:: Circle(double x, double y, double radius): Shape(x, y)
     {
this->radius = radius;
	      }
	What is the purpose of the “: Shape(x, y)” (shown in bold in the code above). What 	happens if you remove it?

	If you remove “: Shape (x, y)” from the Circle constructor and error message appears. The constructor must explicitly initialize the base class Shape which does not have a default constructor. You must include the Shape class because the Circle class will not be able to inherit it's member variables or member functions otherwise.


5.List all the examples of polymorphism that you can find. That is to say, list all the statements 	where 	the datatype of a reference or pointer is not an exact match with the datatype of the object 	that it refers to. At minimum, list at least one example.


	Within GridWriter.cpp the function numberofShapesCoveringPoint is an example of polymorphism. Within the for loop, an if statement uses shapes[i] which is an array of pointers.  By dereferencing shapes[i] with an arrow, you are able to call the containsPoint function. The type of containsPoint function that will be used is not known until runtime (Circle, Rectangle, etc.)  
	
int GridWriter::numberOfShapesCoveringPoint(int x, int y) {
    int count = 0;

    for (int i = 0; i < size; i++) {
        if (shapes[i]->containsPoint(x, y)) {
            count++;
        }
    }

    return count;
}

